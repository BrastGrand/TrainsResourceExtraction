//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTotalResources;

    public static Entitas.IMatcher<GameEntity> TotalResources {
        get {
            if (_matcherTotalResources == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TotalResources);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTotalResources = matcher;
            }

            return _matcherTotalResources;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.ResourceManagement.TotalResources totalResources { get { return (Code.Gameplay.Features.ResourceManagement.TotalResources)GetComponent(GameComponentsLookup.TotalResources); } }
    public int TotalResources { get { return totalResources.Value; } }
    public bool hasTotalResources { get { return HasComponent(GameComponentsLookup.TotalResources); } }

    public GameEntity AddTotalResources(int newValue) {
        var index = GameComponentsLookup.TotalResources;
        var component = (Code.Gameplay.Features.ResourceManagement.TotalResources)CreateComponent(index, typeof(Code.Gameplay.Features.ResourceManagement.TotalResources));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTotalResources(int newValue) {
        var index = GameComponentsLookup.TotalResources;
        var component = (Code.Gameplay.Features.ResourceManagement.TotalResources)CreateComponent(index, typeof(Code.Gameplay.Features.ResourceManagement.TotalResources));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTotalResources() {
        RemoveComponent(GameComponentsLookup.TotalResources);
        return this;
    }
}
